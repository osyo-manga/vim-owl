*owl.txt*	Vim script のユニットテストを行うためのプラグインです。

==============================================================================
目次						*owl-contents*

概要				|owl-introduction|
使い方				|owl-usage|
インターフェース		|owl-interface|
  コマンド			  |owl-commands|


==============================================================================
概要						*owl-introduction*

|owl.vim| は Vim script の簡単なユニットテストを行うためのプラグインです。
他の Vim script ファイルで定義されているスクリプトローカル関数を別のファイル（テストファイル）でテストするような機能に特化しています。
例えば、autoload/owl.vim で定義されているスクリプトローカル関数を test/autoload/owl.vim でテストするような事が出来ます。
テストのチェック方法は基本的にコマンドを使用して定義します。


また、|owl.vim| は下記のプラグインに依存しています。
|owl.vim| を使用する場合は予め下記のプラグインを導入しておく必要があります。

- chained.vim - https://github.com/osyo-manga/vim-chained
- budou.vim   - https://github.com/osyo-manga/vim-budou


==============================================================================
使い方						*owl-usage*

テストを行うための関数を定義し、その中にテストコードを記述していきます。

>
	function! s:plus(a, b)
		return type(a:a) == type("") && type(a:b) == type("") 
	\		? a:a . a:b
	\		: a:a + a:b
	endfunction


	" テストコードを記述するスクリプトローカル関数を定義する
	" s:test_{名前} 名で定義
	function! s:test_plus_success()
		" 引数の式が真であれば成功
		" スクリプトローカル関数を渡すことが出来る
		OwlCheck s:plus(1, 2) == 3

		" ローカル変数を参照することも可能
		let homumami = "homumami"
		OwlCheck s:plus("homu", "mami") == homumami
		
		" OwlEqual s:plus(1, 2) ==  s:plus(5, -2) とほぼ等価
		OwlEqual s:plus(1, 2), s:plus(5, -2)
		
		" 例外排出時のチェック
		OwlThrow s:plus([], {}), E745
	endfunction

	function! s:test_plus_failure()
		OwlCheck s:plus(1, 2) == 1

		let mamihomu = "mamihomu"
		OwlCheck s:plus("homu", "mami") == mamihomu

		" OwlCheck とは違い
		" s:plus(1, 2) と s:plus(5, -5) が評価された値が出力される
		OwlEqual s:plus(1, 2), s:plus(5, -5)
		
		OwlThrow s:plus([], {}), E740
	endfunction

	" テストコードが書かれたファイル名を渡す
	" 自動的に s:test_{名前} の関数を評価する
	call owl#run(expand("<sfile>"))
<
出力例: >
    D:/test/main.vim:31:[failure] s:plus(1, 2) == 1
    D:/test/main.vim:35:[failure] s:plus("homu", "mami") == mamihomu
    D:/test/main.vim:38:[failure] 3 == 0
    D:/test/main.vim:41:[failure] s:plus([], {}), E740
<

------------------------------------------------------------------------------
実行方法					*owl-usage-run*

- コマンドを使用する
	|:OwlRun| にテストを行うファイル名を渡して実行させます。
	例: >
		:OwlRun test.vim
	<

- 関数を使用する
	|owl#run()| にテストを行うファイル名を渡して実行させます。
	コマンドから直接関数を呼び出すか、
	スクリプトファイルの最後に
	>
		call owl#run(expand("<sfile>"))
	<
	を記述して :so % してを実行させます。

- quickrun.vim を使用する
	thinca 氏が作成された quickrun.vim を用いてテストを実行させます。
	quickrun.vim : https://github.com/thinca/vim-quickrun

	|g:quickrun_config| に下記の設定を追加します。

	>
		let g:quickrun_config = {
		\	"vim/owl_test" : {
		\		'command': ':source',
		\		'exec': ["%C %s", "call owl#run('%s')"],
		\		"outputter" : "buffer",
		\		"runner" : "vimscript",
		\	},
		\}
	<
	
	設定を追加して
	>
		:QuickRun vim/owl_test
	<
	で、テストを実行させます。


==============================================================================
インターフェース				*owl-interface*

------------------------------------------------------------------------------
コマンド					*owl-commands*

:OwlRun [{filename}]				*:OwlRun*
	{filename} のテストを実行します。
	引数がない場合は現在のファイル名で実行します。

:OwlCheck {expr}				*:OwlCheck*
	{expr} を評価して、真であれば成功、偽であれば失敗となります。


------------------------------------------------------------------------------
関数						*owl-functions*

owl#run({filename})				*owl#run()*
	{filename} に書かれているテストを実行して結果を出力します。
	内部で :so {filename} されるので注意して下さい。

owl#run_function({filename}, {funcname})	*owl#run_function()*
	{filename} に書かれている {funcname} 関数を実行して結果を出力します。
	内部で :so {filename} されるので注意して下さい。

owl#filename_to_SID({filename})			*owl#filename_to_SID()*
	{filename} の SID を返します。
	この関数はスクリプトローカル関数内でのみ使用出来ます。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
